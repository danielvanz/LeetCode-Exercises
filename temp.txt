

//CurrentColors has 1 initial color
public int backtrack(int[] A, int i, ArrayList<Integer> currentColors) {


    for (int color: currentColors) {
        boolean isGoodColor = true;
        f(i) = color;
        for (j <- A[i]) {
            if (f(i) == f(j)) {
                isGoodColor = false;
                break;
            }
        }
        if (isGoodColor) {
            for (j <- A[i]) {
                if (f(j) == null) {
                    minColorings = min{backtrack(int[] A, j, int amountColors, ArrayList<Integer> currentColors)};
                }
            }
        }
    }

    if (allNodesHaveColor) {
        return currentColors.size();        
    } else {
        currentColors.add(currentColors.size() + 1);
        f(i) = CurrentColors.get(currentColors.size());
            for (j <- A[i]) {
                if (f(j) == null) {
                    minColorings = min{backtrack(int[] A, j, int amountColors, ArrayList<Integer> currentColors)};
                }
            }
    }

}
